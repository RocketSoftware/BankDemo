  /****************************************************************
  *
  * Copyright 1998 – 2024 Rocket Software, Inc. or its affiliates.
  * This software may be used, modified, and distributed
  * (provided this notice is included without modification)
  * solely for internal demonstration purposes with other
  * Rocket® products, and is otherwise subject to the EULA at
  * https://www.rocketsoftware.com/company/trust/agreements.
  *
  * THIS SOFTWARE IS PROVIDED "AS IS" AND ALL IMPLIED
  * WARRANTIES, INCLUDING THE IMPLIED WARRANTIES OF
  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE,
  * SHALL NOT APPLY.
  * TO THE EXTENT PERMITTED BY LAW, IN NO EVENT WILL
  * ROCKET SOFTWARE HAVE ANY LIABILITY WHATSOEVER IN CONNECTION
  * WITH THIS SOFTWARE.
  *
  ****************************************************************/

 /****************************************************************
 * Program:     SBANK10P.pli (CICS Version)
 * Layer:       Screen handling
 * Function:    Signon to system to identify user
 ****************************************************************/

 SBANK10P:PROC(COMMPTR) OPTIONS(MAIN);

 DCL COMMPTR POINTER;
 DCL 01  DFHCOMMAREA      CHAR(8192)          BASED(COMMPTR);

 DCL SCUSTOMP ENTRY OPTIONS(FETCHABLE, COBOL);
 DCL SVERSONP ENTRY OPTIONS(FETCHABLE, COBOL);
 DCL UDATECNV ENTRY OPTIONS(FETCHABLE, COBOL);

 DCL 01  WS_MISC_STORAGE,
    05  WS_PROGRAM_ID                         CHAR(8)
        INIT('SBANK10P'),
    05  WS_TRAN_ID                            CHAR(4),
    05  WS_BUSINESS_LOGIC_PGM                 CHAR(8)
        INIT(''),
    05  WS_DYNAMIC_PGM                        CHAR(8)
        INIT('UNKNOWN'),
    05  WS_SAVED_EIBCALEN                     FIXED BIN(15);

 DCL 01  MAPDATA                              CHAR(2048);
 DCL 01  MAPAREA      POINTER        INIT(ADDR(MAPDATA));
  %INCLUDE MBANK10;

 DCL 01  WS_TIME_DATE_WORK_AREA,
  %INCLUDE CDATED;

 DCL 01  WS_BANK_DATA_AREAS,
    05  WS_BANK_DATA,
  %INCLUDE CBANKDAT;
    05  WS_BANK_EXT_DATA,
  %INCLUDE CBANKEXT;

  DCL WS_BANK_DATA_AREAS_CHAR CHAR(STG(WS_BANK_DATA_AREAS))
      BASED(ADDR(WS_BANK_DATA_AREAS));

  DCL WS_BANK_DATA_CHAR CHAR(STG(WS_BANK_DATA))
      BASED(ADDR(WS_BANK_DATA));

  DCL WS_BANK_EXT_DATA_CHAR CHAR(STG(WS_BANK_EXT_DATA))
      BASED(ADDR(WS_BANK_EXT_DATA));

  %INCLUDE CBANKDAX;

  %INCLUDE CSCRNHDD;

  %INCLUDE CVERSND;

  %INCLUDE DFHAID;

  %INCLUDE DFHBMSCA;

  %INCLUDE CABENDD;

 /****************************************************************
 * Write entry to log to show we have been invoked               *
 *****************************************************************
 *     %INCLUDE CTRACE,
 *****************************************************************
 *                                                               *
 * Copyright 1998 – 2024 Rocket Software, Inc. or its affiliates.*
 *                                                               *
 ****************************************************************/

 /****************************************************************
 * CTRACE.inc
 *---------------------------------------------------------------
 * This %INCLUDEbook is used to provide an a trace of what
 * transactions have been run so we get an idea of activity
 * There are different versions for CICS and IMS,
 ****************************************************************/

 /* Comment out the instructions and recompile to not use the trace */
  EXEC CICS LINK PROGRAM('STRAC00P')
                 COMMAREA(WS_PROGRAM_ID);

 /****************************************************************
 * Store our transaction_id
 ****************************************************************/
  WS_TRAN_ID = EIBTRNID;

 /****************************************************************
 * Store passed data or abend if there wasn't any
 ****************************************************************/
  IF EIBCALEN = 0
  THEN DO;
          ABEND_CULPRIT = WS_PROGRAM_ID;
          ABEND_CODE = '0001';
          ABEND_REASON = '';
          CALL ZZ_ABEND;
       END;

  ELSE DO;
          WS_SAVED_EIBCALEN = EIBCALEN;
          WS_BANK_DATA_CHAR = LOW(STG(WS_BANK_DATA_CHAR));
          WS_BANK_DATA_AREAS_CHAR = SUBSTR(DFHCOMMAREA,1,EIBCALEN);
       END;

 /****************************************************************
 * This is the main process
 ****************************************************************/

 /****************************************************************
 * Determine what we have to do (read from or send to screen)
 ****************************************************************/
  MAPDATA = LOW(STG(MAPDATA));
  SELECT;
      WHEN(BANK_MAP_FUNCTION = 'GET')
          CALL SCREEN10_READ;
      WHEN(BANK_MAP_FUNCTION = 'PUT')
          CALL SCREEN10_BUILD_AND_SEND;
      OTHERWISE
          DO;
             ABEND_CULPRIT = WS_PROGRAM_ID;
             ABEND_CODE = '0002';
             ABEND_REASON = '';
             CALL ZZ_ABEND;
          END;
  END;

 /* Call the appropriate routine to handle the business logic */
  IF BANK_MAP_FUNCTION = 'GET'
  THEN EXEC CICS LINK PROGRAM(WS_BUSINESS_LOGIC_PGM)
                      COMMAREA(WS_BANK_DATA);

 /****************************************************************
 * Now we have to have finished and can return to our invoker,
 ****************************************************************/
 /* Now return to CICS */
  SUBSTR(DFHCOMMAREA,1,WS_SAVED_EIBCALEN)
    = WS_BANK_DATA_AREAS_CHAR;

  EXEC CICS RETURN;

 /****************************************************************
 * Screen processing for MBANK10
 *---------------------------------------------------------------
 * Retrieve data from screen and format it
 ****************************************************************/
  SCREEN10_READ:PROC;
    WS_BUSINESS_LOGIC_PGM = 'BBANK10P';
    SELECT;
      WHEN(BANK_AID = 'CLEAR')
        DO;
           BANK_AID = 'PFK03';
           RETURN;
        END;
      WHEN(BANK_LAST_MAPSET = '')
        RETURN;
      WHEN(BANK_ENV = 'CICS')
         GO TO SCREEN10_READ_CICS;
      OTHERWISE
         GO TO SCREEN10_READ_INET;
    END;

  SCREEN10_READ_CICS:
    IF BANK_HELP_FLAG <= ''
    THEN EXEC CICS RECEIVE MAP('BANK10A')
                           MAPSET('MBANK10');
    ELSE DO;
            EXEC CICS RECEIVE MAP('HELP10A')
                              MAPSET('MBANK10');
            RETURN;
         END;

    IF BANK10AI.USERIDL = 0
    THEN BANK_SIGNON_ID = LOW(STG(BANK_SIGNON_ID));
    ELSE BANK_SIGNON_ID = SUBSTR(BANK10AI.USERIDI,1,BANK10AI.USERIDL);

    IF BANK10AI.PSWDL = 0
    THEN BANK_PSWD = LOW(STG(BANK_PSWD));
    ELSE BANK_PSWD = SUBSTR(BANK10AI.PSWDI,1,BANK10AI.PSWDL);

    RETURN;

  SCREEN10_READ_INET:
    BANK_SIGNON_ID = EXT_IP10_USERID;
    BANK_PSWD = EXT_IP10_PSWD;

 END SCREEN10_READ;

 /****************************************************************
 * Screen processing for SCREEN10 (BANK10/HELP10)
 *---------------------------------------------------------------
 * Build the output screen and send it
 ****************************************************************/
  SCREEN10_BUILD_AND_SEND:PROC;
 /* Clear map area, get date & time and move to the map */
      MAPDATA = LOW(STG(MAPDATA));
      DD_TIME_INPUT_N        = EIBTIME;
      DDI_DATA_YYDDD_YYDDD_N = EIBDATE;
      DDI_TYPE = '3';
      DDO_TYPE = '2';
      CALL CALL_DATECONV;
 /* Ensure the last map fields are correct  */
      BANK_LAST_MAPSET = 'MBANK10';
      IF BANK_HELP_FLAG = 'HELP'
      THEN BANK_LAST_MAP = 'HELP10A';
      ELSE BANK_LAST_MAP = 'BANK10A';
      IF BANK_ENV = 'CICS'
      THEN GOTO SCREEN10_BUILD_AND_SEND_CICS;
      ELSE GOTO SCREEN10_BUILD_AND_SEND_INET;

  SCREEN10_BUILD_AND_SEND_CICS:
      IF BANK_LAST_MAP = 'BANK10A'
      THEN GOTO BANK10_BUILD_AND_SEND_CICS;
      IF BANK_LAST_MAP = 'HELP10A'
      THEN GOTO HELP10_BUILD_AND_SEND_CICS;
      ABEND_CULPRIT = WS_PROGRAM_ID;
      ABEND_CODE = '0003';
      ABEND_REASON = '';
      CALL ZZ_ABEND;

  BANK10_BUILD_AND_SEND_CICS:
      CALL SCUSTOMP(SCREEN_TITLES);
      BANK10AO.HEAD1O =SCREEN_TITLE1;
      BANK10AO.HEAD2O = SCREEN_TITLE2;

      CALL SVERSONP(VERSION);
      BANK10AO.VERO = VERSION;

      BANK10AO.TRANO = WS_TRAN_ID;
      STRING(BANK10AO.TIMEO) = STRING(DD_TIME_OUTPUT);
      BANK10AO.DATEO = DDO_DATA;
 /* Move in any error message */
      BANK10AO.ERRMSGO = BANK_ERROR_MSG;
 /* Move in screen specific fields */
      BANK10AI.USERIDL = -1;
      BANK10AO.USERIDO = BANK_SIGNON_ID;
      BANK10AI.PSWDL = -1;
      BANK10AO.PSWDO = BANK_PSWD;
 /* Turn colour off if required */
      IF BANK_COLOUR_SETTING = '0'
      THEN
          BANK10AO.TXT01C,
          BANK10AO.SCRNC ,
          BANK10AO.HEAD1C,
          BANK10AO.DATEC ,
          BANK10AO.TXT02C,
          BANK10AO.TRANC ,
          BANK10AO.HEAD2C,
          BANK10AO.TIMEC ,
          BANK10AO.TXT03C,
          BANK10AO.TXT04C,
          BANK10AO.TXT05C,
          BANK10AO.TXT06C,
          BANK10AO.USERIDC,
          BANK10AO.TXT07C,
          BANK10AO.PSWDC ,
          BANK10AO.ERRMSGC,
          BANK10AO.TXT08C,
          BANK10AO.VERC = DFHGREEN;

      EXEC CICS SEND MAP('BANK10A')
                     MAPSET('MBANK10')
                     ERASE
                     FREEKB;
      GOTO SCREEN10_BUILD_AND_SEND_EXIT;

  HELP10_BUILD_AND_SEND_CICS:
      CALL SCUSTOMP(SCREEN_TITLES);
      HELP10AO.AHEAD1O = SCREEN_TITLE1;
      HELP10AO.AHEAD2O = SCREEN_TITLE2;
      CALL SVERSONP(VERSION);
      HELP10AO.AVERO = VERSION;
      HELP10AO.ATRANO = WS_TRAN_ID;
      STRING(HELP10AO.ATIMEO) = STRING(DD_TIME_OUTPUT);
      HELP10AO.ADATEO = DDO_DATA;
 /* Move in any error message    */
 /* Move in screen specific fields */
      HELP10AO.AHLP01O = BANK_HELP_LINE (01);
      HELP10AO.AHLP02O = BANK_HELP_LINE (02);
      HELP10AO.AHLP03O = BANK_HELP_LINE (03);
      HELP10AO.AHLP04O = BANK_HELP_LINE (04);
      HELP10AO.AHLP05O = BANK_HELP_LINE (05);
      HELP10AO.AHLP06O = BANK_HELP_LINE (06);
      HELP10AO.AHLP07O = BANK_HELP_LINE (07);
      HELP10AO.AHLP08O = BANK_HELP_LINE (08);
      HELP10AO.AHLP09O = BANK_HELP_LINE (09);
      HELP10AO.AHLP10O = BANK_HELP_LINE (10);
      HELP10AO.AHLP11O = BANK_HELP_LINE (11);
      HELP10AO.AHLP12O = BANK_HELP_LINE (12);
      HELP10AO.AHLP13O = BANK_HELP_LINE (13);
      HELP10AO.AHLP14O = BANK_HELP_LINE (14);
      HELP10AO.AHLP15O = BANK_HELP_LINE (15);
      HELP10AO.AHLP16O = BANK_HELP_LINE (16);
      HELP10AO.AHLP17O = BANK_HELP_LINE (17);
      HELP10AO.AHLP18O = BANK_HELP_LINE (18);
      HELP10AO.AHLP19O = BANK_HELP_LINE (19);
 /* Turn colour off if required */
      IF BANK_COLOUR_SETTING = '0'
      THEN
         HELP10AO.ATXT01C,
         HELP10AO.ASCRNC ,
         HELP10AO.AHEAD1C,
         HELP10AO.ADATEC ,
         HELP10AO.ATXT02C,
         HELP10AO.ATRANC ,
         HELP10AO.AHEAD2C,
         HELP10AO.ATIMEC ,
         HELP10AO.AHLP01C,
         HELP10AO.AHLP02C,
         HELP10AO.AHLP03C,
         HELP10AO.AHLP04C,
         HELP10AO.AHLP05C,
         HELP10AO.AHLP06C,
         HELP10AO.AHLP07C,
         HELP10AO.AHLP08C,
         HELP10AO.AHLP09C,
         HELP10AO.AHLP10C,
         HELP10AO.AHLP11C,
         HELP10AO.AHLP12C,
         HELP10AO.AHLP13C,
         HELP10AO.AHLP14C,
         HELP10AO.AHLP15C,
         HELP10AO.AHLP16C,
         HELP10AO.AHLP17C,
         HELP10AO.AHLP18C,
         HELP10AO.AHLP19C,
         HELP10AO.ATXT03C,
         HELP10AO.AVERC = DFHGREEN;

      EXEC CICS SEND MAP('HELP10A')
                     MAPSET('MBANK10')
                     ERASE
                     FREEKB;
      GOTO SCREEN10_BUILD_AND_SEND_EXIT;


  SCREEN10_BUILD_AND_SEND_INET:
      EXT_DATA = '';
      EXT_OP_TRAN = WS_TRAN_ID;
      EXT_OP_DATE = DDO_DATA   ;
      STRING(EXT_OP_TIME) = STRING(DD_TIME_OUTPUT);
      CALL SCUSTOMP(SCREEN_TITLES);
      EXT_OP_HEAD1 = SCREEN_TITLE1;
      EXT_OP_HEAD2 = SCREEN_TITLE2;
      CALL SVERSONP(SCREEN_TITLES);
      EXT_OP_VERSION = VERSION;
 /* Move in screen name */
      EXT_OP_SCREEN = 'BANK10';
 /* Move in userid and any error message */
      EXT_OP_ERR_MSG = BANK_ERROR_MSG;
      EXT_OP_USERID  = BANK_SIGNON_ID;
      EXT_OP_NAME    = BANK_USERID_NAME;
 /* Move in screen specific fields */
      EXT_OP10_PSWD = BANK_PSWD;
      GOTO SCREEN10_BUILD_AND_SEND_EXIT;

  SCREEN10_BUILD_AND_SEND_EXIT:

  END SCREEN10_BUILD_AND_SEND;

 /****************************************************************
 * Call common routine to perform date conversions
 ****************************************************************/
  CALL_DATECONV:PROC;
      DD_ENV = BANK_ENV;
      CALL UDATECNV(WS_TIME_DATE_WORK_AREA);
  END CALL_DATECONV;

  ZZ_ABEND:PROC;

      ABEND_MSG = ABEND_CULPRIT
               || ' Abend '
               || ABEND_CODE
               || ' _ '
               || ABEND_REASON;

      EXEC CICS WRITE
                OPERATOR
                TEXT(ABEND_MSG);

      EXEC CICS ABEND
            ABCODE(ABEND_CODE);

  END ZZ_ABEND;

 END SBANK10P;
